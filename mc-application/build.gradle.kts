import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id("buildlogic.java-application-conventions")
    id("buildlogic.versioning")     // reads version.txt file to acquire this app's version number
    id("buildlogic.integration-test")
    id("application")
    id("distribution")              // builds a distribution of the application for the homebrew tap
    alias(libs.plugins.shadow.jar)  // builds runnable jar containing all dependencies; use for local testing
    alias(libs.plugins.versions)    // checks for newer versions of dependencies
    alias(libs.plugins.lombok)
}

dependencies {
    implementation(project(":mc-annotations"))
    implementation(project(":mc-common"))
    implementation(project(":mc-adapter-spring-shared"))
    implementation(project(":mc-generator-spring"))

    implementation(libs.picocli.spring.boot.starter)
    implementation(libs.spring.context)
    implementation(libs.spring.core)
    implementation(libs.spring.boot.starter.logging)
    implementation(libs.guava)
    implementation(libs.commonsConfig)

    testImplementation(libs.junit.jupiter)
    testImplementation(libs.assertJ)
    testImplementation(libs.mockito)
    testImplementation(libs.spring.boot.starter.test)
    testRuntimeOnly(libs.junit.platform.launcher)
}


application {
    //mainClass.set("mmm.coffee.zen.cli.CodeZenApplication")
    mainClass.set("mmm.coffee.metacode.Application") // shadowJar needs this syntax
    applicationName = "metacode"
}

/**
 * ----------------------------------------------------------------
 * When the distribution tar/zip file is the published artifact,
 * a jar is included for each module: the tar/zip file contains
 * a 'lib/meta-annotations-x.y.z.jar, lib/meta-cli-x.y.z.jar,
 * lib/meta-common-x.y.z.jar, and so on. The gist is, there's no
 * primary MANIFEST.MF file like the one found in an uber jar
 * (as generated by shadowjar). PicoCLI expects to find _some_
 * MANIFEST file that reveals the implementation-version of
 * MetaCode. This block creates that MANIFEST file and places it
 * in the meta-cli-x.y.z.jar's manifest.
 * ---------------------------------------------------------------- */
tasks.named<Jar>("jar") {
    archiveBaseName.set(application.applicationName)
    // This line isn't absolutely necessary in the manifest, but it's nice to know.
    // manifest.attributes["Main-Class"] = "mmm.coffee.metacode.Application"
    manifest.attributes["Implementation-Title"] = "MetaCode"
    manifest.attributes["Implementation-Version"] = archiveVersion.getOrElse("0.1")
}

/**
 * Shadowjar is used to build an uber-jar that's handy for local
 * testing since it doesn't require installing the distribution jar
 */
tasks.named<ShadowJar>("shadowJar") {
    archiveBaseName.set(application.applicationName)
    // This wasn't being added before, so not if this line is necessary
    manifest.attributes["Main-Class"] = "mmm.coffee.metacode.cli.Application"
    manifest.attributes["Implementation-Title"] = "MetaCode"
    manifest.attributes["Implementation-Version"] = archiveVersion.getOrElse("0.1")
}

tasks {
    build {
        dependsOn(shadowJar)
        dependsOn(jar)
    }
}

/**
 * Short-cut to copy the jar to my scratch directory for testing
 */
tasks.register("stage") {
    group = "Verification"
    description = "Copy the jar to a staging area for end-to-end testing"
    doLast {
        exec {
            workingDir = File(".")
            commandLine("./stageIt.sh")
        }
    }
}

// Since some projects have integrationTests, and some don't,
// the sonar.tests needs to be set for each project. Otherwise,
// it's possible for the sonar.tests value from another project
// to leak into this one, and an error will be raised that
// `The folder src/integrationTest/java' does not exist for...`
sonar {
    properties {
        property("sonar.tests", "src/test/java")

        property("sonar.coverage.exclusions",
                "**/CommandHelpRenderer.java"  // Not sure how to test these other than manually
            +   ",**/AbstractCreateRestProject.java"
            +   ",**/AbstractCreateSpringProject.java"
            +   ",**/SubcommandCreateEndpoint.java"
            +   ",**/SubcommandCreateSpringBootProject.java"
            +   ",**/SubcommandCreateWebFluxProject.java"
            +   ",**/SubcommandCreateWebMvcProject.java"
            +   ",**/PrintExceptionMessageHandler.java"
            +   ",**/AbstractCreateSpringProject.java"
            +   ",**/SubcommandCreateSpringBatchProject.java"
        )
    }
}

