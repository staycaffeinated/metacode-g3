
[X] Add datafaker library and change tests to use datafaker - Done

[ ] Migrate to use hypersistence-utils jars
[-] Add Codecentric's spring-boot-admin-starter-client to classpath. This is improved UI for actuator info
    Won't do. The app's register themselves as clients with the admin-server. Has to be an admin server
    running to be useful.  Its easy to make happen, but should leave to end users to apply as needed.
    Probably worth adding the libraries to the version catalog, but not to build.gradle.
[ ] Change actuator URL from '_internal' back to 'actuator'.
[ ] change MetaPropertiesReader/Writer to use Resource to read metaprops file, and move into hidden folder
[ ] Can Apache Configurations class be replaced w/ some Spring class that does same thing?
[-] Fix PackageNameValidator to be static method that returns Either<String,Boolean> or Result<Boolean>.
    Won't do. The PNV is a kind-of ValidatorTrait along w/ some other classes. The generator's
    create instances of the different validator's they use and add those to a chain. For the chain
    to work, we need the Factory methods that wrap each value to be checked. 

----


Change internal calls to return CallableFuture<>. 

----


Add `branding` property and use it in plugin names;
eg: org.acme.application-conventions.gradle
or  buildlogic.application-conventions.gradle
or  mycompany.application-conventions.gradle

so : {{branding}}.application-conventions.gradle

-----

Add hibernate @SoftDelete annotation so deletes only tombstone records

also:

Add hibernate @DynamicUpdate annotation to Entity classes.

This annotation tells Hibernate to generate SQL updates only for the changed fields,

----[java]
import org.hibernate.annotations.DynamicUpdate;

@Entity
@DynamicUpdate
public class Pet { 

}
----



The generated SQL only updates modified fields. So, instead of

update PET set name=?, owner=? dob=? where ID=?

hibernate will do, say:

update PEt set owner=? where ID=? 

if only the OWNER column was modified.


Consider: 
-- Add @PrePersist and @PreUpdate.  eg:

@Entity
public class PersonView {

   @NonNull
   String resourceId;

   LocalDateTime updateDate;
   LocalDateTime createDate;

   @PrePersist
   public void onPrePersist() {
     this.resourceId = IdGenerator.nextResourceId();
     this.setCreateDate(LocalDateTime.now())
     this.setUpdateDate(LocalDateTime.now())
     }

   @PreUpdate
   public void onPreUpdate() {
     this.setUpdateDate(LocalDateTime.now())
   }
}

>> Have Entity classes implement Serializable???

>> Add spring-boot-admin-starter-client to dependencies? 
This provides a nice UI to the actuator info. 

implementation("de.codecentric:spring-boot-admin-starter-client:3.2.3")
https://github.com/codecentric/spring-boot-admin
https://docs.spring-boot-admin.com/current/getting-started.html

>> Add ProGuard to app build
https://developer.android.com/build/shrink-code

Seems more appropriate for Android apps; dunno if it'll add value for us

-----

>> Add hypersistence-utils ?  
Have to add it add see if we get better query performance or diagnostics

-------

Change class names and hierarchy; eg:

PetPersistenceAdapter
+ upsert(Pet p)
+ remove(Pet p)

PetQueryAdapter:
+ search(String queryString)
+ findByResourceId(ResourceId id)
+ findTopNPets(int limit)
+ findTopNRemovedPets(int limit)

PetPersistenceService:
+ create(Pet)
+ update(Pet)
+ delete(Pet)

PetQueryService:
+ search
+ findById
+ findTop()


>>> Can we figure out how to make resourceId a type, so we can do this:

>> Tried this and have it working, but there's a lot of refactoring
around ResourceId API. Mainly, the tests asserting store.getResourceId().equals(someExpectedStringId)
which now needs to be getResourceId().get().equals(someStringId) _or_
store.getResourceId().equals(ResourceId.from(expectedStringId))

public PetDto {
  ResourceId resourceId;

}
public class ResourceId {
  final String resourceId;
}
with automatic conversion of ResourceId to String ?


------

Add DataFaker library to test dependencies and use that to generate fake values. 
It'll provide more variety and be likely to be leveraged to build out the app.

------

Change plugin namespace from `org.example` to `buildlogic`

